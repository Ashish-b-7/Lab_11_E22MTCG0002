# -*- coding: utf-8 -*-
"""lab 11 SE

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zM4-BGJNHHOhLgHSIsvEPq4JZjb4uF8T?usp=share_link

QUES 1
"""

class Shape:
    def _init_(self, *args):
        pass

    def area(self):
        pass


class Circle(Shape):
    def _init_(self, radius):
        self.radius = radius

    def area(self):
        return round(3.14 * self.radius ** 2, 2)

    def _str_(self):
        return f"Circle ({self.radius})"


class Square(Shape):
    def _init_(self, side):
        self.side = side

    def area(self):
        return self.side ** 2

    def _str_(self):
        return f"Square ({self.side})"


class Rectangle(Shape):
    def _init_(self, length, breadth):
        self.length = length
        self.breadth = breadth

    def area(self):
        return self.length * self.breadth

    def _str_(self):
        return f"Rectangle ({self.length}, {self.breadth})"


class ShapeCollection:
    def _init_(self):
        self.shapes = []

    def add_shape(self, shape):
        self.shapes.append(shape)

    def display_shapes(self):
        for shape in self.shapes:
            print(f"{shape}: area = {shape.area()}")

def main():
    collection = ShapeCollection()

    with open('input.txt', 'r') as file:
        for line in file:
            data = line.split()
            if len(data) < 2:
                print(f"Invalid input format: {line.strip()}")
                continue

            shape_type = data[0]
            try:
                dimensions = [float(dimension) for dimension in data[1:]]
            except ValueError:
                print(f"Invalid dimensions for {shape_type}: {data[1:]}")
                continue

            if shape_type == "Circle":
                if len(dimensions) != 1:
                    print(f"Invalid dimensions for {shape_type}: {dimensions}")
                    continue
                circle = Circle(dimensions[0])
                collection.add_shape(circle)
            elif shape_type == "Square":
                if len(dimensions) != 1:
                    print(f"Invalid dimensions for {shape_type}: {dimensions}")
                    continue
                square = Square(dimensions[0])
                collection.add_shape(square)
            elif shape_type == "Rectangle":
                if len(dimensions) != 2:
                    print(f"Invalid dimensions for {shape_type}: {dimensions}")
                    continue
                rectangle = Rectangle(dimensions[0], dimensions[1])
                collection.add_shape(rectangle)
            else:
                print(f"Invalid shape type {shape_type}")

    with open(f"/content/result_E22MTCG0002.txt", "w") as output_file:
        for shape in collection.shapes:
          try:
              area = shape.area()
              if isinstance(shape, Circle):
                  dimensions_str = f"({shape.radius})"
              else:
                  dimensions_str = ' '.join(map(str, dimensions))
              output_file.write(f"{shape} {dimensions_str} {area}\n")
          except Exception as e:
              if isinstance(shape, Circle):
                  dimensions_str = f"({shape.radius})"
              else:
                  dimensions_str = ' '.join(map(str, dimensions))
              output_file.write(f"{shape} {dimensions_str} <error>\n")
              print(f"Error occurred while calculating area for {shape}: {str(e)}")

    collection.display_shapes()


if _name_ == "_main_":
    main()

"""ques 2
  
"""

import pickle

class Petal:
    def _init_(self, length, width):
        self.length = length
        self.width = width

class Sepal:
    def _init_(self, length, width):
        self.length = length
        self.width = width

class Flower:
    def _init_(self, petal, sepal, flowerName):
        self.petal = petal
        self.sepal = sepal
        self.flowerName = flowerName
        self.selectionScore = self.calculate_selection_score()

    def calculate_selection_score(self):
        return (self.sepal.length * 0.5) + (self.sepal.width * 0.75) + \
               (self.petal.length * 1.2) + (self.petal.width * 2.5)

# Reading data from iris.data file
with open('/content/iris.data', 'r') as file:
    data = file.readlines()

# Creating Flower objects
flowers = []
for line in data:
    line_data = line.strip().split(',')
    if len(line_data) != 5:
        continue
    sepal_length = float(line_data[0])
    sepal_width = float(line_data[1])
    petal_length = float(line_data[2])
    petal_width = float(line_data[3])
    flower_name = line_data[4]
    petal = Petal(petal_length, petal_width)
    sepal = Sepal(sepal_length, sepal_width)
    flower = Flower(petal, sepal, flower_name)
    flowers.append(flower)

# Selecting top 50% flowers based on selection score
flowers.sort(key=lambda x: x.selectionScore, reverse=True)
selected_flowers = flowers[:int(len(flowers)/2)]

# Serializing selected flower objects in a .pkl file
with open('selected_flowers.pkl', 'wb') as file:
    for flower in selected_flowers:
        # Removing Sepal length attribute before serialization
        flower.sepal._dict_.pop('length', None)
        pickle.dump(flower, file)

# Deserializing and verifying the Serialization
with open('selected_flowers.pkl', 'rb') as file:
    deserialized_flowers = []
    while True:
        try:
            flower = pickle.load(file)
            deserialized_flowers.append(flower)
        except EOFError:
            break
    for flower in deserialized_flowers:
        print(f"Flower Name: {flower.flowerName}, Selection Score: {flower.selectionScore}")